// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schem

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url      = "postgresql://postgres:postgres@localhost:5432/postgres?schema=public"
}

generator client {
  provider        = "prisma-client-js"
}

// Report Entity
model Report {
  id          Int      @id @default(autoincrement())
  email       String
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Model Overwrites
  @@map(name: "report")
}

// User Entity
enum UserType {
  SUPER_ADMIN
  ADMIN
  MOD
  SEG_ADMIN
  SEG_MOD
  MUNICIPAL_SEG_ADMIN
  BUSINESS
  RESIDENTIAL
  MUNICIPAL
  WORKER
  ASSOCIATE
  DEVELOPER
  COMMUNITY
  IN_PROGRESS

  @@map(name: "user_type")
}

enum AdType {
  BASIC
  EXTRA

  @@map(name: "ad_type")
}

enum BanUserType {
  WARNING
  POST_BAN
  SYS_BAN

  @@map(name: "ban_user_type")
}

// model UserRole {
//   // keys
//   id        Int      @id @default(autoincrement())
//   name      String   @unique
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

//   // relations
//   users User[]
// }

model UserGeo {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @unique @map("user_id")

  // Columns
  lat        Decimal?
  lon        Decimal?
  work_lat   Decimal?
  work_lon   Decimal?
  school_lat Decimal?
  school_lon Decimal?
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_geo")
}

model UserAddress {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @unique @map("user_id")

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_address")
}

model UserBan {
  id                    Int         @id @default(autoincrement())
  userId                String      @map(name: "user_id")
  banType               BanUserType @default(WARNING) @map(name: "ban_type")
  banReason             String      @map(name: "ban_reason")
  banMessage            String?     @map(name: "ban_message")
  bannedBy              String      @map(name: "banned_by")
  createdAt             DateTime    @default(now()) @map(name: "created_at")
  banUntil              DateTime    @default(now()) @map(name: "banned_until")
  notificationDismissed Boolean     @default(false) @map(name: "notification_dismissed")
  banDuration           Int         @default(0) @map(name: "ban_duration")
  user                  User        @relation(fields: [userId], references: [id])

  @@map(name: "ban_user")
}

model PostBan {
  id                    Int      @id @default(autoincrement())
  postId                Int      @map(name: "post_id")
  authorId              String   @map(name: "author_id")
  banReason             String   @map(name: "ban_reason")
  banMessage            String?  @map(name: "ban_message")
  bannedBy              String   @map(name: "banned_by")
  createdAt             DateTime @default(now()) @map(name: "created_at")
  notificationDismissed Boolean  @default(false) @map(name: "notification_dismissed")
  post                  Idea     @relation(fields: [postId], references: [id])

  @@map(name: "ban_post")
}

model CommentBan {
  id                    Int         @id @default(autoincrement())
  commentId             Int         @map(name: "comment_id")
  authorId              String      @map(name: "author_id")
  banReason             String      @map(name: "ban_reason")
  banMessage            String?     @map(name: "ban_message")
  bannedBy              String      @map(name: "banned_by")
  createdAt             DateTime    @default(now()) @map(name: "created_at")
  notificationDismissed Boolean     @default(false) @map(name: "notification_dismissed")
  comment               IdeaComment @relation(fields: [commentId], references: [id])

  @@map(name: "ban_comment")
}

model User {
  // Keys
  id       String   @id @default(cuid())
  //userRoleId Int?     @map("user_role_id")
  userType UserType @default(RESIDENTIAL) @map("user_type")

  // Fields
  email            String   @unique
  password         String
  organizationName String?  @map("organization_name")
  fname            String?  @map("f_name")
  lname            String?  @map("l_name")
  createdAt        DateTime @default(now()) @map(name: "created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map(name: "updated_at")
  imagePath        String?
  passCode         String?  @default(cuid())
  banned           Boolean  @default(false)
  reviewed         Boolean  @default(false)
  totalFlagged     Int      @default(0) @map("total_flagged")
  hasFlagged       Int      @default(0) @map("has_flagged")
  verified         Boolean  @default(false)
  verifiedToken    String?  @default(cuid())
  displayFName      String?  @map("display_f_name")
  displayLName      String?  @map("display_l_name")
  adminmodEmail     String?  @map("adminmod_email")
  status           Boolean  @default(true)



  // Relationships
  address             UserAddress?
  geo                 UserGeo?
  userReach           UserReach[]
  userIdeaFollow      UserIdeaFollow[]
  userIdeaEndorse     UserIdeaEndorse[]
  //userRole        UserRole?    @relation(fields: [userRoleId], references: [id])
  ideas               Idea[]                @relation("ideaAuthor")
  ideaFlags           IdeaFlag[]
  commentFlags        CommentFlag[]
  championedIdeas     Idea[]                @relation("ideaChampion")
  stripe              UserStripe?
  userBans            UserBan[]
  //championedIdeas     Idea[]                @relation("championedIdeas")
  ideaRatings         IdeaRating[]
  ideaComments        IdeaComment[]
  ideaCommentLikes    UserCommentLikes[]
  ideaCommentDislikes UserCommentDislikes[]
  collaborators       Collaborator[]        @relation("ideaCollaborator")
  volunteers          Volunteer[]           @relation("ideaVolunteer")
  donors              Donor[]               @relation("ideaDonor")
  feedbackratings     FeedbackRating[]

  // Model overwrites
  Advertisements                    Advertisements[]
  //Not sure if this one stays
  segmentRequest                    segmentRequest[]
  userSegments                      UserSegments?
  Quarantine_Notifications          Quarantine_Notifications[]
  Ban_History                       Ban_History[]
  Public_Community_Business_Profile Public_Community_Business_Profile[]
  Public_Municipal_Profile          Public_Municipal_Profile[]
  False_Flagging_Behavior           False_Flagging_Behavior[]
  Bad_Posting_Behavior              Bad_Posting_Behavior[]
  School_Details                    School_Details[]
  Work_Details                      Work_Details[]

  @@map(name: "user")
}

// user segment entity
model UserSegments {
  id                   String        @id @default(cuid())
  userId               String        @unique @map("user_id")
  user                 User?         @relation(fields: [userId], references: [id])
  homeSuperSegId       Int?          @map("home_super_segment_id")
  homeSuperSegName     String?       @map("home_super_segment_name")
  workSuperSegId       Int?          @map("work_super_segment_id")
  workSuperSegName     String?       @map("work_super_segment_name")
  schoolSuperSegId     Int?          @map("school_super_segment_id")
  schoolSuperSegName   String?       @map("school_super_segment_name")
  homeSegmentId        Int?          @map("home_segment_id")
  homeSegmentName      String?       @map("home_segment_name")
  workSegmentId        Int?          @map("work_segment_id")
  workSegmentName      String?       @map("work_segment_name")
  schoolSegmentId      Int?          @map("school_segment_id")
  schoolSegmentName    String?       @map("school_segment_name")
  homeSubSegmentId     Int?          @map("home_sub_segment")
  homeSubSegmentName   String?       @map("home_sub_segment_name")
  workSubSegmentId     Int?          @map("work_sub_segment")
  workSubSegmentName   String?       @map("work_sub_segment_name")
  schoolSubSegmentId   Int?          @map("school_sub_segment")
  schoolSubSegmentName String?       @map("school_sub_segment_name")
  homeSegHandle       String?       @map("home_seg_handle")
  workSegHandle       String?       @map("work_seg_handle")
  schoolSegHandle     String?       @map("school_seg_handle")
  homeSuperSeg         SuperSegment? @relation("homeSuperSeg", fields: [homeSuperSegId], references: [superSegId])
  workSuperSeg         SuperSegment? @relation("workSuperSeg", fields: [workSuperSegId], references: [superSegId])
  schoolSuperSeg       SuperSegment? @relation("schoolSuperSeg", fields: [schoolSuperSegId], references: [superSegId])
  homeSegment          Segments?     @relation("homeSegment", fields: [homeSegmentId], references: [segId])
  workSegment          Segments?     @relation("workSegment", fields: [workSegmentId], references: [segId])
  schoolSegment        Segments?     @relation("schoolSegment", fields: [schoolSegmentId], references: [segId])
  homeSubSegment       SubSegments?  @relation("homeSubSegment", fields: [homeSubSegmentId], references: [id])
  workSubSegment       SubSegments?  @relation("workSubSegment", fields: [workSubSegmentId], references: [id])
  schoolSubSegment     SubSegments?  @relation("schoolSubSegment", fields: [schoolSubSegmentId], references: [id])
  IdeaComment          IdeaComment[]
}

// Category entity
model Category {
  // keys
  id Int @id @default(autoincrement())

  // Fields
  title       String   @unique
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  ideas Idea[]

  @@map(name: "category")
}

// Idea Entity
enum IdeaState {
  IDEA
  PROPOSAL
  PROJECT

  @@map(name: "idea_state")
}

model IdeaGeo {
  // keys
  id         Int  @id @default(autoincrement())
  ideaId     Int? @unique @map("idea_id")
  proposalId Int? @map("proposal_id")

  // Columns
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea? @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_geo")
}

model IdeaAddress {
  // keys
  id         Int  @id @default(autoincrement())
  ideaId     Int? @unique @map("idea_id")
  proposalId Int? @map("proposal_id")

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea? @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_address")
}

model Collaborator {
  // keys
  id         Int    @id @default(autoincrement())
  proposalId Int    @map("proposal_id")
  authorId   String @map("author_id")

  experience  String? @default("No experience")
  role        String? @default("No role")
  time        String? @default("No time")
  contactInfo String? @default("No contact info")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  proposal Proposal @relation("collab", fields: [proposalId], references: [id])
  author   User     @relation("ideaCollaborator", fields: [authorId], references: [id])

  @@unique([proposalId, authorId], name: "collaborator_unique")
  @@map(name: "collaborator")
}

model Volunteer {
  id         Int    @id @default(autoincrement())
  proposalId Int    @map("proposal_id")
  authorId   String @map("author_id")

  experience  String? @default("No experience")
  task        String? @default("No task")
  time        String? @default("No time")
  contactInfo String? @default("No contact info")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  proposal Proposal @relation("volunteer", fields: [proposalId], references: [id])
  author   User     @relation("ideaVolunteer", fields: [authorId], references: [id])

  @@unique([proposalId, authorId], name: "volunteer_unique")
  @@map(name: "volunteer")
}

model Donor {
  id         Int    @id @default(autoincrement())
  proposalId Int    @map("proposal_id")
  authorId   String @map("author_id")

  donations   String? @default("No donations")
  contactInfo String? @default("No contact info")

  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  proposal Proposal @relation("donor", fields: [proposalId], references: [id])
  author   User     @relation("ideaDonor", fields: [authorId], references: [id])

  @@unique([proposalId, authorId], name: "donor_unique")
  @@map(name: "donors")
}

model Idea {
  // Keys
  id                   Int     @id @default(autoincrement())
  authorId             String  @map("author_id")
  supportingProposalId Int?    @map("supporting_proposal_id")
  championId           String? @map("champion_id")
  categoryId           Int     @map("category_id")
  superSegmentId       Int     @map("super_segment_id")
  segmentId            Int?    @map("segment_id")
  subSegmentId         Int?    @map("sub_segment_id")

  // Values
  title                  String
  description            String
  proposal_role          String    @default("")
  requirements           String    @default("")
  proposal_benefits      String    @default("")
  userType               String    @default("Resident")
  communityImpact        String?   @map("community_impact")
  natureImpact           String?   @map("nature_impact")
  artsImpact             String?   @map("arts_impact")
  energyImpact           String?   @map("energy_impact")
  manufacturingImpact    String?   @map("manufacturing_impact")
  state                  IdeaState @default(IDEA)
  active                 Boolean   @default(true)
  banned                 Boolean   @default(false)
  reviewed               Boolean   @default(false)
  imagePath              String?   @map("image_path")
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @default(now()) @updatedAt @map(name: "updated_at")
  notification_dismissed Boolean   @map("notification_dismissed")
  quarantined_at         DateTime  @default(now()) @map(name: "quarantined_at")

  // relations
  comments        IdeaComment[]
  ratings         IdeaRating[]
  flags           IdeaFlag[]
  PostBan         PostBan[]
  proposalInfo    Proposal?         @relation("proposal")
  projectInfo     Project?
  address         IdeaAddress?
  geo             IdeaGeo?
  userIdeaFollow  UserIdeaFollow[]
  userIdeaEndorse UserIdeaEndorse[]

  // Multiple relationships pointing to same User Model
  // https://github.com/prisma/prisma/discussions/2073
  author                   User                       @relation("ideaAuthor", fields: [authorId], references: [id])
  supportedProposal        Proposal?                  @relation("supportedProposal", fields: [supportingProposalId], references: [id])
  champion                 User?                      @relation("ideaChampion", fields: [championId], references: [id])
  category                 Category                   @relation(fields: [categoryId], references: [id])
  superSegment             SuperSegment               @relation(fields: [superSegmentId], references: [superSegId])
  segment                  Segments?                  @relation(fields: [segmentId], references: [segId])
  subSegment               SubSegments?               @relation(fields: [subSegmentId], references: [id])
  Quarantine_Notifications Quarantine_Notifications[]

  @@unique([id, title])
  @@map(name: "idea")
}

model IdeaFlag {
  id         Int     @id @default(autoincrement())
  ideaId     Int     @map("idea_id")
  flaggerId  String  @map("flagger_id")
  falseFlag  Boolean @default(false) @map("false_flag")
  flagReason String? @map("flag_reason")
  //relations
  idea       Idea    @relation(fields: [ideaId], references: [id])
  flagger    User    @relation(fields: [flaggerId], references: [id])

  @@map(name: "idea_flag")
}

model CommentFlag {
  id          Int         @id @default(autoincrement())
  commentId   Int         @map("comment_id")
  flaggerId   String      @map("flagger_id")
  falseFlag   Boolean     @default(false) @map("false_flag")
  //relations
  ideaComment IdeaComment @relation(fields: [commentId], references: [id])
  flagger     User        @relation(fields: [flaggerId], references: [id])

  flagReason String? @map("flag_reason")

  @@map(name: "comment_flag")
}

model Proposal {
  id     Int @id @default(autoincrement())
  ideaId Int @unique @map("idea_id")

  needCollaborators Boolean @default(false)
  needVolunteers    Boolean @default(false)
  needDonations     Boolean @default(false)
  needSuggestions   Boolean @default(false)
  needFeedback      Boolean @default(false)

  collaborations Collaborator[] @relation("collab")
  volunteers     Volunteer[]    @relation("volunteer")
  donors         Donor[]        @relation("donor")

  feedback1 String? @map("feedback_1")
  feedback2 String? @map("feedback_2")
  feedback3 String? @map("feedback_3")
  feedback4 String? @map("feedback_4")
  feedback5 String? @map("feedback_5")

  feedbackType1 String? @map("feedback_type_1")
  feedbackType2 String? @map("feedback_type_2")
  feedbackType3 String? @map("feedback_type_3")
  feedbackType4 String? @map("feedback_type_4")
  feedbackType5 String? @map("feedback_type_5")

  location       String? @map("location")
  // Relations
  idea           Idea    @relation("proposal", fields: [ideaId], references: [id])
  suggestedIdeas Idea[]  @relation("supportedProposal")
  feedbackRatings FeedbackRating[]

  @@map(name: "proposal")
}

model Project {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @unique @map("idea_id")

  // fields
  // TODO: Add fields that would be in Project state
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "project")
}

model FeedbackRating {
  // Keys
  id          Int      @id @default(autoincrement())
  proposalId  Int      @map("proposal_id")
  feedbackId  Int      @map("feedback_id")
  authorId    String   @map("author_id")
  // Fields
  rating             Int      @default(0)
  ratingExplanation String? @map("rating_explaination")
  createdAt          DateTime @default(now()) @map(name: "created_at")
  updatedAt          DateTime @default(now()) @updatedAt @map(name: "updated_at")
  // relations
  author             User     @relation(fields: [authorId], references: [id])
  proposal           Proposal @relation(fields: [proposalId], references: [id])
}

model IdeaRating {
  // Keys
  id                Int      @id @default(autoincrement())
  ideaId            Int      @map("idea_id")
  authorId          String   @map("author_id")
  // Fields
  rating            Int      @default(0)
  ratingExplanation String?  @map("rating_explanation")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map(name: "updated_at")
  // relations
  author            User     @relation(fields: [authorId], references: [id])
  idea              Idea     @relation(fields: [ideaId], references: [id])

  @@map(name: "idea_rating")
}

model IdeaComment {
  // keys
  id                     Int      @id @default(autoincrement())
  ideaId                 Int      @map("idea_id")
  // Fields
  authorId               String   @map("author_id")
  userSegId              String   @map("user_segment_id")
  superSegmentId         Int?     @map("super_segment_id")
  segmentId              Int?     @map("segment_id")
  subSegmentId           Int?     @map("sub_segment_id")
  content                String
  active                 Boolean  @default(true)
  reviewed               Boolean  @default(false)
  createdAt              DateTime @default(now()) @map(name: "created_at")
  updatedAt              DateTime @default(now()) @updatedAt @map(name: "updated_at")
  notification_dismissed Boolean  @default(false) @map("notification_dismissed")
  quarantined_at         DateTime @default(now()) @map(name: "quarantined_at")

  // Comment Funnel Fields
  tone                   String?
  attitude               String?
  keywords               Json?

  // Moderator Fields
  commentFlagNumber Int                   @default(0) @map("comment_flag_num")
  bannedComment     Boolean               @default(false) @map("banned_comment")
  // relations
  author            User                  @relation(fields: [authorId], references: [id])
  idea              Idea                  @relation(fields: [ideaId], references: [id])
  userSeg           UserSegments          @relation(fields: [userSegId], references: [id])
  likes             UserCommentLikes[]
  commentFlags      CommentFlag[]
  commentBans       CommentBan[]
  dislikes          UserCommentDislikes[]

  @@map(name: "idea_comment")
}

model UserCommentLikes {
  id            Int          @id @default(autoincrement())
  ideaCommentId Int?         @map("idea_comment_id")
  authorId      String?      @map("author_id")
  ideaComment   IdeaComment? @relation(fields: [ideaCommentId], references: [id])
  author        User?        @relation(fields: [authorId], references: [id])

  @@map(name: "user_comment_likes")
}

model UserCommentDislikes {
  id            Int          @id @default(autoincrement())
  ideaCommentId Int?         @map("idea_comment_id")
  authorId      String?      @map("author_id")
  ideaComment   IdeaComment? @relation(fields: [ideaCommentId], references: [id])
  author        User?        @relation(fields: [authorId], references: [id])

  @@map(name: "user_comment_dislikes")
}

model Advertisements {
  id       Int       @id @default(autoincrement())
  ownerId  String    @map("owner_id")
  createAt DateTime  @default(now()) @map("creat_at")
  updateAt DateTime? @default(now()) @updatedAt @map("update_at")

  adTitle      String    @map("advertisement_title")
  adType       AdType    @default(BASIC) @map("advertisement_type")
  duration     DateTime? @map("advertisement_duration")
  adPosition   String    @map("advertisement_position")
  imagePath    String    @map("advertisement_image_path")
  externalLink String    @map("advertisement_external_link")
  published    Boolean   @default(false) @map("published")

  author User? @relation(fields: [ownerId], references: [id])

  @@map(name: "advertisement")
}

model SuperSegment {
  superSegId Int       @id @default(autoincrement()) @map("super_seg_id")
  name       String
  country    String
  province   String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at")

  Segments           Segments[]
  Idea               Idea[]
  homeUserSegments   UserSegments[] @relation("homeSuperSeg")
  workUserSegments   UserSegments[] @relation("workSuperSeg")
  schoolUserSegments UserSegments[] @relation("schoolSuperSeg")

  @@map("super_segment")
}

model Segments {
  segId        Int          @id @default(autoincrement()) @map("seg_id")
  superSegId   Int
  country      String
  province     String
  name         String       @map("segment_name")
  superSegName String?      @map("super_segment_name")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @updatedAt @map("update_at")
  superSegment SuperSegment @relation(references: [superSegId], fields: [superSegId])

  SubSegments    SubSegments[]
  homeSegments   UserSegments[] @relation("homeSegment")
  workSegments   UserSegments[] @relation("workSegment")
  schoolSegments UserSegments[] @relation("schoolSegment")
  Idea           Idea[]
  userReach      UserReach[]

  @@map(name: "segment")
}

// UserReach
model UserReach {
  // Columns
  id     String @id @default(cuid())
  userId String @map("user_id")
  segId  Int

  // Relations
  user    User     @relation(references: [id], fields: [userId])
  segment Segments @relation(references: [segId], fields: [segId])

  @@unique([userId, segId], name: "user_reach_unique")
  @@map(name: "user_reach")
}

// UserIdeaFollow
model UserIdeaFollow {
  // Columns
  id         Int      @id @default(autoincrement()) @map("id")
  userId     String   @map("user_id")
  ideaId     Int      @map("idea_id")
  followedAt DateTime @default(now()) @map("followed_at")

  // Relations
  user User @relation(references: [id], fields: [userId])
  idea Idea @relation(references: [id], fields: [ideaId])

  @@unique([userId, ideaId], name: "user_idea_follow_unique")
  @@map(name: "user_idea_follow")
}

// UserIdeaEndorse
model UserIdeaEndorse {
  // Columns
  id         Int      @id @default(autoincrement()) @map("id")
  userId     String   @map("user_id")
  ideaId     Int      @map("idea_id")
  endorsedAt DateTime @default(now()) @map("endorsed_at")

  // Relations
  user User @relation(references: [id], fields: [userId])
  idea Idea @relation(references: [id], fields: [ideaId])

  @@unique([userId, ideaId], name: "user_idea_endorse_unique")
  @@map(name: "user_idea_endorse")
}

model SubSegments {
  id        Int       @id @default(autoincrement())
  segId     Int       @map("seg_id")
  name      String    @map("sub_segment_name")
  lat       Decimal?
  lon       Decimal?
  radius    Decimal?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("update_at")

  segRef            Segments       @relation(fields: [segId], references: [segId])
  homeSubSegments   UserSegments[] @relation("homeSubSegment")
  workSubSegments   UserSegments[] @relation("workSubSegment")
  schoolSubSegments UserSegments[] @relation("schoolSubSegment")

  Idea Idea[]

  @@map(name: "sub_segment")
}

model segmentRequest {
  id             Int      @id @default(autoincrement())
  createAt       DateTime @default(now()) @map("created_at")
  userId         String   @map("user_id")
  country        String
  province       String
  segmentName    String   @map("segment name")
  subSegmentName String?  @map("sub segment name")
  requester      User     @relation(fields: [userId], references: [id])
}

model UserStripe {
  user     User   @relation(fields: [userId], references: [id])
  userId   String @unique
  stripeId String
  status   Status @default(incomplete)

  @@id([userId, stripeId])
  @@map(name: "user_stripe")
}

model Threshhold {
  id     Int @id @default(autoincrement())
  number Int @default(3)
}

enum Status {
  active
  incomplete
}

model Quarantine_Notifications {
  id        Int      @id @default(autoincrement())
  userId    String
  ideaId    Int
  ideaTitle String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id])
  idea      Idea     @relation(fields: [ideaId, ideaTitle], references: [id, title])

  @@unique([id, userId, ideaId], name: "user_idea_quarantine_unique")
  @@map(name: "quarantine_notifications")
}

enum BanType {
  IDEA
  COMMENT
  USER
}

model Ban_History {
  id              Int       @id @default(autoincrement())
  userId          String
  type            BanType
  reason          String
  userBanType     String?
  userBannedUntil DateTime?
  ideaId          Int?
  commentId       Int?
  modId           String
  message         String
  createdAt       DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id])

  @@map(name: "ban_history")
}

enum LinkType {
  WEBSITE
  TWITTER
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  YOUTUBE
  TIKTOK
  OTHER
}

model Link {
  id                                  Int                                @id @default(autoincrement())
  link                                String
  linkType                            LinkType
  createdAt                           DateTime                           @default(now()) @map("created_at")
  Public_Community_Business_Profile   Public_Community_Business_Profile? @relation(fields: [public_Community_Business_ProfileId], references: [id])
  public_Community_Business_ProfileId Int?
  Public_Municipal_Profile            Public_Municipal_Profile?          @relation(fields: [public_Municipal_ProfileId], references: [id])
  public_Municipal_ProfileId          Int?

  @@map(name: "link")
}

// Split the public profiles so it is easier to scale them individually
model Public_Community_Business_Profile {
  id           Int      @id @default(autoincrement())
  userId       String
  statement    String?
  description  String?
  links        Link[]
  address      String?
  contactEmail String?  @map("contact_email")
  contactPhone String?  @map("contact_phone")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id])

  @@map(name: "public_community_business_profile")
}

model Public_Municipal_Profile {
  id             Int      @id @default(autoincrement())
  userId         String
  statement      String
  responsibility String
  links          Link[]
  address        String
  contactEmail   String?  @map("contact_email")
  contactPhone   String?  @map("contact_phone")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @map("updated_at")
  user           User     @relation(fields: [userId], references: [id])

  @@map(name: "public_municipal_profile")
}

model False_Flagging_Behavior {
  id          Int       @id @default(autoincrement())
  flag_count  Int       @default(0)
  flag_ban    Boolean   @default(false)
  userId      String    @map("user_id")
  bannedAt    DateTime? @map("banned_at")
  bannedUntil DateTime? @map("banned_until")
  user        User      @relation(fields: [userId], references: [id])

  @@map(name: "false_flagging_behavior")
}

model Bad_Posting_Behavior {
  id         Int       @id @default(autoincrement())
  bad_post_count Int    @default(0)
  post_flag_count Int  @default(0)
  post_comment_ban Boolean @default(false)
  bannedAt   DateTime? @map("banned_at")
  bannedUntil DateTime? @map("banned_until")
  userId     String    @map("user_id")
  user       User      @relation(fields: [userId], references: [id])

  @@map(name: "bad_posting_behavior")
}

model School_Details {
  id         Int      @id @default(autoincrement())
  displayFName String? @map("display_f_name")
  displayLName String? @map("display_l_name")
  streetAddress String?   @map("street_address")
  postalCode String?   @map("postal_code")
  faculty   String?   
  programCompletionDate DateTime? @db.Date @map("program_completion_date")
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map(name: "school_details")
}

model Work_Details {
  id        Int      @id @default(autoincrement())
  displayFName String? @map("display_f_name")
  displayLName String? @map("display_l_name")
  streetAddress String?   @map("street_address")
  postalCode String?   @map("postal_code")
  company    String? 
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@map(name: "work_details")
}

model Feature_Toggle {
  id        Int      @id @default(autoincrement())
  featureName String @unique
  isEnabled Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@map(name: "feature_toggle")
}