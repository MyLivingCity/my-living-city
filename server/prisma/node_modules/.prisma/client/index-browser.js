
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.21.2
 * Query Engine version: b8c35d44de987a9691890b3ddf3e2e7effb9bf20
 */
Prisma.prismaVersion = {
  client: "2.21.2",
  engine: "b8c35d44de987a9691890b3ddf3e2e7effb9bf20"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.ReportScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserGeoScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  lat: 'lat',
  lon: 'lon',
  work_lat: 'work_lat',
  work_lon: 'work_lon',
  school_lat: 'school_lat',
  school_lon: 'school_lon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserAddressScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  streetAddress: 'streetAddress',
  streetAddress2: 'streetAddress2',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  userType: 'userType',
  email: 'email',
  password: 'password',
  fname: 'fname',
  lname: 'lname',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  imagePath: 'imagePath',
  passCode: 'passCode',
  banned: 'banned'
});

exports.Prisma.UserSegmentsScalarFieldEnum = makeEnum({
  id: 'id',
  userId: 'userId',
  homeSuperSegId: 'homeSuperSegId',
  homeSuperSegName: 'homeSuperSegName',
  workSuperSegId: 'workSuperSegId',
  workSuperSegName: 'workSuperSegName',
  schoolSuperSegId: 'schoolSuperSegId',
  schoolSuperSegName: 'schoolSuperSegName',
  homeSegmentId: 'homeSegmentId',
  homeSegmentName: 'homeSegmentName',
  workSegmentId: 'workSegmentId',
  workSegmentName: 'workSegmentName',
  schoolSegmentId: 'schoolSegmentId',
  schoolSegmentName: 'schoolSegmentName',
  homeSubSegmentId: 'homeSubSegmentId',
  homeSubSegmentName: 'homeSubSegmentName',
  workSubSegmentId: 'workSubSegmentId',
  workSubSegmentName: 'workSubSegmentName',
  schoolSubSegmentId: 'schoolSubSegmentId',
  schoolSubSegmentName: 'schoolSubSegmentName'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  title: 'title',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.GeoScalarFieldEnum = makeEnum({
  id: 'id',
  ideaId: 'ideaId',
  proposalId: 'proposalId',
  lat: 'lat',
  lon: 'lon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  ideaId: 'ideaId',
  proposalId: 'proposalId',
  streetAddress: 'streetAddress',
  streetAddress2: 'streetAddress2',
  city: 'city',
  country: 'country',
  postalCode: 'postalCode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.IdeaScalarFieldEnum = makeEnum({
  id: 'id',
  authorId: 'authorId',
  championId: 'championId',
  categoryId: 'categoryId',
  superSegmentId: 'superSegmentId',
  segmentId: 'segmentId',
  subSegmentId: 'subSegmentId',
  title: 'title',
  description: 'description',
  userType: 'userType',
  communityImpact: 'communityImpact',
  natureImpact: 'natureImpact',
  artsImpact: 'artsImpact',
  energyImpact: 'energyImpact',
  manufacturingImpact: 'manufacturingImpact',
  state: 'state',
  active: 'active',
  imagePath: 'imagePath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProposalScalarFieldEnum = makeEnum({
  id: 'id',
  authorId: 'authorId',
  championId: 'championId',
  categoryId: 'categoryId',
  superSegmentId: 'superSegmentId',
  segmentId: 'segmentId',
  subSegmentId: 'subSegmentId',
  title: 'title',
  description: 'description',
  userType: 'userType',
  communityImpact: 'communityImpact',
  natureImpact: 'natureImpact',
  artsImpact: 'artsImpact',
  energyImpact: 'energyImpact',
  manufacturingImpact: 'manufacturingImpact',
  state: 'state',
  active: 'active',
  imagePath: 'imagePath',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.ProjectScalarFieldEnum = makeEnum({
  id: 'id',
  ideaId: 'ideaId',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.RatingScalarFieldEnum = makeEnum({
  id: 'id',
  ideaId: 'ideaId',
  proposalId: 'proposalId',
  authorId: 'authorId',
  rating: 'rating',
  ratingExplanation: 'ratingExplanation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.CommentScalarFieldEnum = makeEnum({
  id: 'id',
  ideaId: 'ideaId',
  proposalId: 'proposalId',
  authorId: 'authorId',
  userSegId: 'userSegId',
  superSegmentId: 'superSegmentId',
  segmentId: 'segmentId',
  subSegmentId: 'subSegmentId',
  content: 'content',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.UserCommentLikesScalarFieldEnum = makeEnum({
  id: 'id',
  ideaCommentId: 'ideaCommentId',
  authorId: 'authorId'
});

exports.Prisma.UserCommentDislikesScalarFieldEnum = makeEnum({
  id: 'id',
  ideaCommentId: 'ideaCommentId',
  authorId: 'authorId'
});

exports.Prisma.AdvertisementsScalarFieldEnum = makeEnum({
  id: 'id',
  ownerId: 'ownerId',
  createAt: 'createAt',
  updateAt: 'updateAt',
  adTitle: 'adTitle',
  adType: 'adType',
  duration: 'duration',
  adPosition: 'adPosition',
  imagePath: 'imagePath',
  externalLink: 'externalLink',
  published: 'published'
});

exports.Prisma.SuperSegmentScalarFieldEnum = makeEnum({
  superSegId: 'superSegId',
  name: 'name',
  country: 'country',
  province: 'province',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SegmentsScalarFieldEnum = makeEnum({
  segId: 'segId',
  superSegId: 'superSegId',
  country: 'country',
  province: 'province',
  name: 'name',
  superSegName: 'superSegName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SubSegmentsScalarFieldEnum = makeEnum({
  id: 'id',
  segId: 'segId',
  name: 'name',
  lat: 'lat',
  lon: 'lon',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SegmentRequestScalarFieldEnum = makeEnum({
  id: 'id',
  createAt: 'createAt',
  userId: 'userId',
  country: 'country',
  province: 'province',
  segmentName: 'segmentName',
  subSegmentName: 'subSegmentName'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});
exports.UserType = makeEnum({
  ADMIN: 'ADMIN',
  MOD: 'MOD',
  SEG_ADMIN: 'SEG_ADMIN',
  SEG_MOD: 'SEG_MOD',
  MUNICIPAL_SEG_ADMIN: 'MUNICIPAL_SEG_ADMIN',
  BUSINESS: 'BUSINESS',
  RESIDENTIAL: 'RESIDENTIAL',
  MUNICIPAL: 'MUNICIPAL',
  WORKER: 'WORKER',
  ASSOCIATE: 'ASSOCIATE',
  DEVELOPER: 'DEVELOPER'
});

exports.IdeaState = makeEnum({
  IDEA: 'IDEA',
  PROPOSAL: 'PROPOSAL',
  PROJECT: 'PROJECT'
});

exports.AdType = makeEnum({
  BASIC: 'BASIC',
  EXTRA: 'EXTRA'
});

exports.Prisma.ModelName = makeEnum({
  Report: 'Report',
  UserGeo: 'UserGeo',
  UserAddress: 'UserAddress',
  User: 'User',
  UserSegments: 'UserSegments',
  Category: 'Category',
  Geo: 'Geo',
  Address: 'Address',
  Idea: 'Idea',
  Proposal: 'Proposal',
  Project: 'Project',
  Rating: 'Rating',
  Comment: 'Comment',
  UserCommentLikes: 'UserCommentLikes',
  UserCommentDislikes: 'UserCommentDislikes',
  Advertisements: 'Advertisements',
  SuperSegment: 'SuperSegment',
  Segments: 'Segments',
  SubSegments: 'SubSegments',
  segmentRequest: 'segmentRequest'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
