// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schem

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //url      = "postgresql://postgres:postgres@localhost:5432/postgres?schema=public"
}

generator client {
  provider        = "prisma-client-js"

}

// Report Entity
model Report {
  id          Int      @id @default(autoincrement())
  email       String
  description String
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // Model Overwrites
  @@map(name: "report")
}

// User Entity
enum UserType {
  ADMIN
  MOD
  SEG_ADMIN
  SEG_MOD
  MUNICIPAL_SEG_ADMIN
  BUSINESS
  RESIDENTIAL
  MUNICIPAL
  WORKER
  ASSOCIATE
  DEVELOPER

  @@map(name: "user_type")
}

enum AdType {
  BASIC
  EXTRA

  @@map(name: "ad_type")
}

// model UserRole {
//   // keys
//   id        Int      @id @default(autoincrement())
//   name      String   @unique
//   createdAt DateTime @default(now()) @map(name: "created_at")
//   updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

//   // relations
//   users User[]
// }

model UserGeo {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @map("user_id") @unique

  // Columns
  lat        Decimal?
  lon        Decimal?
  work_lat   Decimal?
  work_lon   Decimal?
  school_lat Decimal?
  school_lon Decimal?
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_geo")
}

model UserAddress {
  // keys
  id     Int    @id @default(autoincrement())
  userId String @map("user_id") @unique

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  user User @relation(fields: [userId], references: [id])

  @@map(name: "user_address")
}

model User {
  // Keys
  id       String   @id @default(cuid())
  //userRoleId Int?     @map("user_role_id")
  userType UserType @default(RESIDENTIAL) @map("user_type")

  // Fields
  email     String   @unique
  password  String
  fname     String?  @map("f_name")
  lname     String?  @map("l_name")
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")
  imagePath String?
  passCode  String?  @default(cuid())
  banned    Boolean  @default(false)
  // Relationships

  address         UserAddress?
  geo             UserGeo?
  //userRole        UserRole?    @relation(fields: [userRoleId], references: [id])
  ideas           Idea[]       @relation("ideaAuthor")
  proposals  Proposal[]   @relation("proposalAuthor")
  championedProposals Proposal[] @relation("proposalChampion")
  championedIdeas Idea[]       @relation("ideaChampion")

  // championedIdeas     Idea[]                @relation("championedIdeas")
  ideaRatings         Rating[]
  ideaComments        Comment[]
  ideaCommentLikes    UserCommentLikes[]
  ideaCommentDislikes UserCommentDislikes[]


  // Model overwrites
  Advertisements Advertisements[]
  //Not sure if this one stays
  segmentRequest segmentRequest[]
  userSegments   UserSegments?
  @@map(name: "user")
}

// user segment entity
model UserSegments {
  id                   String        @id @default(cuid())
  userId               String        @map("user_id") @unique
  user                 User?         @relation(fields: [userId], references: [id])
  homeSuperSegId       Int?          @map("home_super_segment_id")
  homeSuperSegName     String?       @map("home_super_segment_name")
  workSuperSegId       Int?          @map("work_super_segment_id")
  workSuperSegName     String?       @map("work_super_segment_name")
  schoolSuperSegId     Int?          @map("school_super_segment_id")
  schoolSuperSegName   String?       @map("school_super_segment_name")
  homeSegmentId        Int?          @map("home_segment_id")
  homeSegmentName      String?       @map("home_segment_name")
  workSegmentId        Int?          @map("work_segment_id")
  workSegmentName      String?       @map("work_segment_name")
  schoolSegmentId      Int?          @map("school_segment_id")
  schoolSegmentName    String?       @map("school_segment_name")
  homeSubSegmentId     Int?          @map("home_sub_segment")
  homeSubSegmentName   String?       @map("home_sub_segment_name")
  workSubSegmentId     Int?          @map("work_sub_segment")
  workSubSegmentName   String?       @map("work_sub_segment_name")
  schoolSubSegmentId   Int?          @map("school_sub_segment")
  schoolSubSegmentName String?       @map("school_sub_segment_name")
  homeSuperSeg         SuperSegment? @relation("homeSuperSeg", fields: [homeSuperSegId], references: [superSegId])
  workSuperSeg         SuperSegment? @relation("workSuperSeg", fields: [workSuperSegId], references: [superSegId])
  schoolSuperSeg       SuperSegment? @relation("schoolSuperSeg", fields: [schoolSuperSegId], references: [superSegId])
  homeSegment          Segments?     @relation("homeSegment", fields: [homeSegmentId], references: [segId])
  workSegment          Segments?     @relation("workSegment", fields: [workSegmentId], references: [segId])
  schoolSegment        Segments?     @relation("schoolSegment", fields: [schoolSegmentId], references: [segId])
  homeSubSegment       SubSegments?  @relation("homeSubSegment", fields: [homeSubSegmentId], references: [id])
  workSubSegment       SubSegments?  @relation("workSubSegment", fields: [workSubSegmentId], references: [id])
  schoolSubSegment     SubSegments?  @relation("schoolSubSegment", fields: [schoolSubSegmentId], references: [id])
  IdeaComment          Comment[]
}

// Category entity
model Category {
  // keys
  id Int @id @default(autoincrement())

  // Fields
  title       String   @unique
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  ideas Idea[]
  proposals Proposal[]

  @@map(name: "category")
}

// Idea Entity
enum IdeaState {
  IDEA
  PROPOSAL
  PROJECT

  @@map(name: "idea_state")
}

model Geo {
  // keys
  id     Int @id @default(autoincrement()) @unique
  ideaId Int? @map("idea_id") @unique
  proposalId Int? @map("proposal_id") @unique

  // Columns
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea? @relation(fields: [ideaId], references: [id])
  proposal Proposal? @relation(fields: [proposalId], references: [id])

  @@map(name: "idea_geo")
}

model Address {
  // keys
  id     Int @id @default(autoincrement()) @unique
  ideaId Int? @map("idea_id") @unique
  proposalId Int? @map("proposal_id") @unique

  // Columns
  streetAddress  String?  @map("street_address")
  streetAddress2 String?  @map("street_address_2")
  city           String?
  country        String?
  postalCode     String?  @map("postal_code")
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relationships
  idea Idea? @relation(fields: [ideaId], references: [id])
  proposal Proposal? @relation(fields: [proposalId], references: [id])

  @@map(name: "idea_address")
}

model Idea {
  // Keys
  id             Int     @id @default(autoincrement())
  authorId       String  @map("author_id")
  championId     String? @map("champion_id")
  categoryId     Int     @map("category_id")
  superSegmentId Int     @map("super_segment_id")
  segmentId      Int?    @map("segment_id")
  subSegmentId   Int?    @map("sub_segment_id")

  // Values
  title               String
  description         String
  userType            String    @default("Resident")
  communityImpact     String?   @map("community_impact")
  natureImpact        String?   @map("nature_impact")
  artsImpact          String?   @map("arts_impact")
  energyImpact        String?   @map("energy_impact")
  manufacturingImpact String?   @map("manufacturing_impact")
  state               IdeaState @default(IDEA)
  active              Boolean   @default(true)
  imagePath           String?   @map("image_path")
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  comments     Comment[]
  ratings      Rating[]
  projectInfo  Project?
  address      Address?
  geo          Geo?

  // Multiple relationships pointing to same User Model
  // https://github.com/prisma/prisma/discussions/2073
  author       User         @relation("ideaAuthor", fields: [authorId], references: [id])
  champion     User?        @relation("ideaChampion", fields: [championId], references: [id])
  category     Category     @relation(fields: [categoryId], references: [id])
  superSegment SuperSegment @relation(fields: [superSegmentId], references: [superSegId])
  segment      Segments?    @relation(fields: [segmentId], references: [segId])
  subSegment   SubSegments? @relation(fields: [subSegmentId], references: [id])

  @@map(name: "idea")
}

model Proposal {
  // Keys
  id             Int     @id @default(autoincrement())
  authorId       String  @map("author_id")
  championId     String? @map("champion_id")
  categoryId     Int     @map("category_id")
  superSegmentId Int     @map("super_segment_id")
  segmentId      Int?    @map("segment_id")
  subSegmentId   Int?    @map("sub_segment_id")

  // Values
  title               String
  description         String
  userType            String    @default("Resident")
  communityImpact     String?   @map("community_impact")
  natureImpact        String?   @map("nature_impact")
  artsImpact          String?   @map("arts_impact")
  energyImpact        String?   @map("energy_impact")
  manufacturingImpact String?   @map("manufacturing_impact")
  state               IdeaState @default(PROPOSAL)
  active              Boolean   @default(true)
  imagePath           String?   @map("image_path")
  createdAt           DateTime  @default(now()) @map(name: "created_at")
  updatedAt           DateTime  @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  comments     Comment[]
  ratings      Rating[]
  address      Address?
  geo          Geo?

  // Multiple relationships pointing to same User Model
  // https://github.com/prisma/prisma/discussions/2073
  author       User         @relation("proposalAuthor", fields: [authorId], references: [id])
  champion     User?        @relation("proposalChampion", fields: [championId], references: [id])
  category     Category     @relation(fields: [categoryId], references: [id])
  superSegment SuperSegment @relation(fields: [superSegmentId], references: [superSegId])
  segment      Segments?    @relation(fields: [segmentId], references: [segId])
  subSegment   SubSegments? @relation(fields: [subSegmentId], references: [id])

  @@map(name: "proposal")
}

model Project {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int @map("idea_id") @unique

  // fields
  // TODO: Add fields that would be in Project state
  description String?
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  idea Idea @relation(fields: [ideaId], references: [id])

  @@map(name: "project")
}

model Rating {
  // Keys
  id       Int    @id @default(autoincrement())
  ideaId   Int?    @map("idea_id")
  proposalId Int?    @map("proposal_id")
  authorId String @map("author_id")

  // Fields
  rating            Int      @default(0)
  ratingExplanation String?  @map("rating_explanation")
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author User @relation(fields: [authorId], references: [id])
  idea   Idea? @relation(fields: [ideaId], references: [id])
  proposal Proposal? @relation(fields: [proposalId], references: [id])

  @@map(name: "idea_rating")
}

model Comment {
  // keys
  id     Int @id @default(autoincrement())
  ideaId Int? @map("idea_id")
  proposalId Int? @map("proposal_id")

  // Fields
  authorId       String   @map("author_id")
  userSegId      String   @map("user_segment_id")
  superSegmentId Int?     @map("super_segment_id")
  segmentId      Int?     @map("segment_id")
  subSegmentId   Int?     @map("sub_segment_id")
  content        String
  active         Boolean  @default(true)
  createdAt      DateTime @default(now()) @map(name: "created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map(name: "updated_at")

  // relations
  author   User                  @relation(fields: [authorId], references: [id])
  idea     Idea?                  @relation(fields: [ideaId], references: [id])
  proposal Proposal?              @relation(fields: [proposalId], references: [id]) 
  userSeg  UserSegments          @relation(fields: [userSegId], references: [id])
  likes    UserCommentLikes[]
  dislikes UserCommentDislikes[]

  @@map(name: "idea_comment")
}

model UserCommentLikes {
  id            Int     @id @default(autoincrement())
  ideaCommentId Int?    @map("idea_comment_id")
  authorId      String? @map("author_id")

  ideaComment Comment? @relation(fields: [ideaCommentId], references: [id])
  author      User?        @relation(fields: [authorId], references: [id])

  @@map(name: "user_comment_likes")
}

model UserCommentDislikes {
  id            Int     @id @default(autoincrement())
  ideaCommentId Int?    @map("idea_comment_id")
  authorId      String? @map("author_id")

  ideaComment Comment? @relation(fields: [ideaCommentId], references: [id])
  author      User?        @relation(fields: [authorId], references: [id])

  @@map(name: "user_comment_dislikes")
}

model Advertisements {
  id       Int       @id @default(autoincrement())
  ownerId  String    @map("owner_id")
  createAt DateTime  @default(now()) @map("creat_at")
  updateAt DateTime? @default(now()) @updatedAt @map("update_at")

  adTitle      String    @map("advertisement_title")
  adType       AdType    @default(BASIC) @map("advertisement_type")
  duration     DateTime? @map("advertisement_duration")
  adPosition   String    @map("advertisement_position")
  imagePath    String    @map("advertisement_image_path")
  externalLink String    @map("advertisement_external_link")
  published    Boolean   @default(false) @map("published")

  author User? @relation(fields: [ownerId], references: [id])

  @@map(name: "advertisement")
}

model SuperSegment {
  superSegId Int       @id @default(autoincrement()) @map("super_seg_id")
  name       String
  country    String
  province   String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @default(now()) @updatedAt @map("updated_at")

  Segments           Segments[]
  Idea               Idea[]
  Proposal           Proposal[]
  homeUserSegments   UserSegments[] @relation("homeSuperSeg")
  workUserSegments   UserSegments[] @relation("workSuperSeg")
  schoolUserSegments UserSegments[] @relation("schoolSuperSeg")
  @@map("super_segment")
}

model Segments {
  segId        Int          @id @default(autoincrement()) @map("seg_id")
  superSegId   Int
  country      String
  province     String
  name         String       @map("segment_name")
  superSegName String?      @map("super_segment_name")
  createdAt    DateTime     @default(now()) @map("created_at")
  updatedAt    DateTime?    @default(now()) @updatedAt @map("update_at")
  superSegment SuperSegment @relation(references: [superSegId], fields: [superSegId])

  SubSegments    SubSegments[]
  homeSegments   UserSegments[] @relation("homeSegment")
  workSegments   UserSegments[] @relation("workSegment")
  schoolSegments UserSegments[] @relation("schoolSegment")
  Idea           Idea[]
  Proposal       Proposal[]
  @@map(name: "segment")
}

model SubSegments {
  id        Int       @id @default(autoincrement())
  segId     Int       @map("seg_id")
  name      String    @map("sub_segment_name")
  lat       Decimal?
  lon       Decimal?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @default(now()) @updatedAt @map("update_at")

  segRef            Segments       @relation(fields: [segId], references: [segId])
  homeSubSegments   UserSegments[] @relation("homeSubSegment")
  workSubSegments   UserSegments[] @relation("workSubSegment")
  schoolSubSegments UserSegments[] @relation("schoolSubSegment")

  Idea Idea[]
  Proposal Proposal[]
  @@map(name: "sub_segment")
}

model segmentRequest {
  id             Int      @id @default(autoincrement())
  createAt       DateTime @default(now()) @map("created_at")
  userId         String   @map("user_id")
  country        String
  province       String
  segmentName    String   @map("segment name")
  subSegmentName String?  @map("sub segment name")
  requester      User     @relation(fields: [userId], references: [id])
}
